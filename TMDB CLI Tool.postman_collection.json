{
	"info": {
		"_postman_id": "470f220a-97b6-4f22-822a-6acfbfb3844c",
		"name": "TMDB CLI Tool",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35050113"
	},
	"item": [
		{
			"name": "Now Playing Movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('filteredResult');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.filteredResult).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body filtered result should have correct data', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { filteredResult } = responseJson;\r",
							"\r",
							"    pm.expect(filteredResult).to.ownProperty('dates');\r",
							"    pm.expect(filteredResult).to.ownProperty('results');\r",
							"\r",
							"    pm.expect(filteredResult.dates).to.be.an('object');\r",
							"    pm.expect(filteredResult.results).to.be.an('array');\r",
							"\r",
							"    filteredResult.results.forEach((event) => {\r",
							"        pm.expect(Object.keys(event)).to.lengthOf(4);\r",
							"        pm.expect(event).to.ownProperty('id');\r",
							"        pm.expect(event).to.ownProperty('title');\r",
							"        pm.expect(event).to.ownProperty('overview');\r",
							"        pm.expect(event).to.ownProperty('release_date');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/playing",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"playing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Popular Movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('filteredResult');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.filteredResult).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body filtered result should have correct property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { filteredResult } = responseJson;\r",
							"\r",
							"    pm.expect(filteredResult).to.ownProperty('results');\r",
							"    pm.expect(filteredResult.results).to.be.an('array');\r",
							"\r",
							"    filteredResult.results.forEach((event) => {\r",
							"        pm.expect(Object.keys(event)).to.lengthOf(5);\r",
							"        pm.expect(event).to.ownProperty('id');\r",
							"        pm.expect(event).to.ownProperty('title');\r",
							"        pm.expect(event).to.ownProperty('overview');\r",
							"        pm.expect(event).to.ownProperty('popularity');\r",
							"        pm.expect(event).to.ownProperty('release_date');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/popular",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"popular"
					]
				}
			},
			"response": []
		},
		{
			"name": "Top Rated Movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('filteredResult');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.filteredResult).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body filtered result should have correct property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { filteredResult } = responseJson;\r",
							"\r",
							"    pm.expect(filteredResult).to.ownProperty('results');\r",
							"    pm.expect(filteredResult.results).to.be.an('array');\r",
							"\r",
							"    filteredResult.results.forEach((event) => {\r",
							"        pm.expect(Object.keys(event)).to.lengthOf(6);\r",
							"        pm.expect(event).to.ownProperty('id');\r",
							"        pm.expect(event).to.ownProperty('title');\r",
							"        pm.expect(event).to.ownProperty('overview');\r",
							"        pm.expect(event).to.ownProperty('vote_average');\r",
							"        pm.expect(event).to.ownProperty('vote_count');\r",
							"        pm.expect(event).to.ownProperty('release_date');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/top",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"top"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upcoming Movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson).to.ownProperty('filteredResult');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.filteredResult).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body filtered result should have correct property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { filteredResult } = responseJson;\r",
							"\r",
							"    pm.expect(filteredResult).to.ownProperty('dates');\r",
							"    pm.expect(filteredResult).to.ownProperty('results');\r",
							"    \r",
							"    pm.expect(filteredResult.dates).to.be.an('object');\r",
							"    pm.expect(filteredResult.results).to.be.an('array');\r",
							"\r",
							"    filteredResult.results.forEach((event) => {\r",
							"        pm.expect(Object.keys(event)).to.lengthOf(4);\r",
							"        pm.expect(event).to.ownProperty('id');\r",
							"        pm.expect(event).to.ownProperty('title');\r",
							"        pm.expect(event).to.ownProperty('overview');\r",
							"        pm.expect(event).to.ownProperty('release_date');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/upcoming",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"upcoming"
					]
				}
			},
			"response": []
		}
	]
}